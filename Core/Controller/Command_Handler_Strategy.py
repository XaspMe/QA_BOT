from Core.Controller import DB_handler, UserValidation
from Core.View import Telegram_Markups as tm
from Core.Controller.Comands import Command_Factory
from Core.Controller import DB_handler as db
from telebot import *

"""
–°—é–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—Å—Ç–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è View —Å instance –æ—Ç–≤–µ—Ç–∞.
"""


class Messages_hanlder:
    def Operate(self, message: str) -> Command_Factory.AbstractHandler:

        if message.text == '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å':
            if len(db.Handler().get_chosenGroups_by_chatids_id(message.chat.id)) > 0:
                return Command_Factory.NextQuestion(message)
            else:
                return Command_Factory.NotChosenGroups(message)

        elif message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç':
            return Command_Factory.Answer(message)

        elif message.text == '–ú–µ–Ω—é' or \
                message.text == 'start' or \
                message.text == 'help' or \
                message.text == '/start' or \
                message.text == '/help':
            return Command_Factory.Menu(message)

        elif message.text == '–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å–∞–º':
            if len(db.Handler().get_chosenGroups_by_chatids_id(message.chat.id)) > 0:
                return Command_Factory.NextQuestion(message)
            else:
                return Command_Factory.NotChosenGroups(message)

        # elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' or \
        #         message.text == '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ':
        #     return Command_Factory.InvertChosen(message)

        elif message.text == '–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—ã' or \
                'üëç' in message.text or \
                'üëé' in message.text:
            return Command_Factory.Themes(message)

        # elif message.text == '/adm':
        #     try:
        #         return Command_Factory.AdminPanel(message)
        #     except Command_Factory.UserAccessError:
        #         return Command_Factory.Nothing(message)

        else:
            return Command_Factory.Nothing(message)

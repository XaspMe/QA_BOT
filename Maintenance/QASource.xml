<?xml version="1.0" encoding="utf-8"?>
<Questions>
  <!--1(ООП, ПАТТЕРНЫ, ПРИЕМЫ ПРОЕКТИРОВАНИЯ) 2(ШАРП) 3(БАЗОВЫЕ ВОПРОСЫ ПО РАЗРАБОТКЕ) 4(ПИТОН)-->
  <question qgroup="1" qtext="Что такое объект? " qanswer="Объект – это некоторая сущность, обладающая определённым состоянием и поведением, имеет заданные значения свойств (полей) и операций над ними (методов). " />
  <question qgroup="1" qtext="Что такое ООП? " qanswer="ООП - Объектно-ориентированное программирование — парадигма программирования, в которой основными концепциями являются понятия объектов и классов." />
  <question qgroup="1" qtext="Что такое экземпляр класса?" qanswer="Экземпляр класса (instance) — это описание конкретного объекта в памяти." />
  <question qgroup="1" qtext="Что такое класс?" qanswer="Класс — это конструкция языка, состоящая из ключевого слова class, идентификатора и тела. Класс может содержать в своем теле поля и методы. Также классы могут включать в свое тело другие классы, но такой подход не является широко распространённой техникой. " />
  <question qgroup="1" qtext="Назовите основные парадигмы OOP." qanswer="1 - Инкапсуляция. 2 - Наследование. 3 - Полиморфизм." />
  <question qgroup="1" qtext="Что такое инкапсуляция? " qanswer="Инкапсуляция — свойство системы, позволяющее объединить данные и методы, работающие с ними, в классе." />
  <question qgroup="2" qtext="Что такое свойство?" qanswer="Свойство — это способ доступа к внутреннему состоянию объекта, имитирующий переменную некоторого типа. Обращение к свойству объекта выглядит так же, как и обращение к структурному полю (в структурном программировании), но, в действительности, реализовано через вызов функции." />
  <question qgroup="2" qtext="Какие виды свойств бывают? " qanswer="При попытке задать значение данного свойства вызывается один метод - SET, а при попытке получить значение данного свойства — другой - GET.  " />
  <question qgroup="2" qtext="Что такое модификаторы доступа и где их используют?" qanswer="Модификаторы доступа позволяют задать допустимую область видимости для членов класса. То есть контекст, в котором можно употреблять данную переменную или метод." />
  <question qgroup="2" qtext="Какие типы конструкторов вы знаете? " qanswer="Конструкторы бывают двух видов конструкторы типа и конструкторы экземпляра класса. Конструкторы типа являются статическими и выполняются средой CLR до использования типа. Конструкторы экземпляра класса работают тогда, когда создается экземпляр класса. " />
  <question qgroup="2" qtext="Зачем использовать конструкторы по умолчанию? " qanswer="Конструкторы экземпляра класса, которые не принимают параметров, называют конструкторами по умолчанию. " />
  <question qgroup="2" qtext="Что такое partial класс? " qanswer="Чтобы разделить класс на несколько частей, используйте ключевое слово partial. Существует несколько ситуаций, при которых желательно разделение создания класса:  1 - При работе над большими проектами распределение класса между различными файлами позволяет нескольким программистам работать с ним одновременно.  2 - При работе с использованием автоматически создаваемого источника, код можно добавлять в класс без повторного создания файла источника. Например: при создании форм Windows Forms.  " />
  <question qgroup="2" qtext="Что такое partial метод?" qanswer="Частичные методы - это методы, где «прототип» или сигнатура метода определена при создании частичного класса, а реализация выполняется в любой другой (только одной) части этого класса. " />
  <question qgroup="1" qtext="Что такое ассоциация? " qanswer="Ассоциация показывает, что объекты одной сущности (класса) связаны с объектами другой сущности. " />
  <question qgroup="1" qtext="Какие связей отношений между классами вы знаете? " qanswer="Ассоциация - показывает, что объекты одной сущности (класса) связаны с объектами другой сущности. Агрегация грегация — это разновидность ассоциации при отношении между целым и его частями.(Отношение типа: «Я знаю о…  и без этого могу существовать»). Одно отношение агрегации не может включать более двух классов (контейнер и содержимое). Композиция более строгий вариант агрегации. Композиция имеет жёсткую зависимость времени существования экземпляров класса-контейнера и экземпляров содержащихся классов. Если контейнер будет уничтожен, то всё его содержимое будет также уничтожено. (Отношение типа: «Я знаю о…  и без этого не могу существовать») . Зависимость Зависимость — это слабая форма отношения использования, при котором изменение в спецификации одного влечёт за собой изменение другого, причем обратное не обязательно. " />
  <question qgroup="2" qtext="Чем поля, помеченные ключевым словом readonly, отличаются от констант?" qanswer="Ключевое слово readonly отличается от ключевого слова const тем, что поле с модификатором const может быть инициализировано только при создании поля. Поле с модификатором readonly может быть инициализировано при создании или в конструкторе. Следовательно, поля с модификатором readonly могут иметь различные значения в зависимости от использованного конструктора.  " />
  <question qgroup="1" qtext="Что такое наследование? " qanswer="Наследование — механизм объектно-ориентированного программирования (наряду с инкапсуляцией, полиморфизмом и абстракцией), позволяющий описать новый класс на основе уже существующего (родительского), при этом свойства и функциональность родительского класса заимствуются новым классом.  " />
  <question qgroup="1" qtext="Какие недостатки наследования вы знаете? " qanswer="Недостаток наследования – хрупкий базовый класс. Хрупкий базовый класс — фундаментальная проблема объектно-ориентированного программирования. Проблема хрупкого базового класса заключается в том, что малейшие правки в деталях реализации базового класса могут привнести ошибку в производные классы." />
  <question qgroup="1" qtext="Что такое полиморфизм? " qanswer="Полиморфизм — возможность объектов с одинаковой спецификацией иметь различную реализацию. " />
  <question qgroup="2" qtext="Зачем используется ключевое слово virtual? " qanswer="Virtual Модификатор используется для обозначения того, что метод \property (ect) может быть изменен в производном классе с помощью Override." />
  <question qgroup="1" qtext="Что такое Cast, Upcast, Downcast? " qanswer="Cast - приведение типов. Upcast - приведение к базовому классу. Downcast - приведение к подчиненному" />
  <question qgroup="2" qtext="Зачем используется ключевое слово Sealed?" qanswer="Предотвращает наследование класса." />
  <question qgroup="2" qtext="Зачем нужен модификатор Public?" qanswer="Организует доступ к типу или члену таким образом, что он возможен из любого другого кода в той же сборке или другой сборке, ссылающейся на него" />
  <question qgroup="2" qtext="Какой доступ предоставляет модификтор protected?" qanswer="Только из кода в том же классе или структуре, либо в производном классе." />
  <question qgroup="2" qtext="Какой режим доступа организует модификатор Internal" qanswer="Доступ к типу или члену возможен из любого кода в той же сборке, но не из другой сборки. " />
  <question qgroup="2" qtext="Описать режим доступа с парой модификаторов - Protected internal" qanswer="Доступ ограничен текущей сборкой или типами, которые являются производными от содержащего класса." />
  <question qgroup="2" qtext="Описать модификтор доступа Protected" qanswer="Доступ к типу или члену можно получить только из кода в том же классе или структуре. " />
  <question qgroup="1" qtext="Что такое абстрактный класс?" qanswer="В объектно-ориентированном программировании — базовый класс, который не предполагает создания экземпляров." />
  <question qgroup="2" qtext="Что такое интерфейс?" qanswer="Интерфейс содержит только сигнатуры методов, свойств, событий или индексаторов. И не имеет реализации. Интерфейс - это набор абстрактных членов класса." />
  <question qgroup="1" qtext="Чем абстрактный класс отличается от интерфейса?" qanswer="Абстрактные классы МОГУТ содержать в себе реализацию некоторых методов, интерфейсы содержат только прототипы освещающие сигнатуры." />
  <question qgroup="2" qtext="Что такое множественное наследование? " qanswer="Наследование реализации и членов от множества базовых классов. Множественное наследование отсутствует в C#" />
  <question qgroup="1" qtext="Чем абстрактный класс отличается от конкретного? " qanswer="Ключевое слово abstract при создании класса указывает, что класс предназначен только для использования в качестве базового класса для других классов. Члены, помеченные как абстрактные или включенные в абстрактный класс, должны быть реализованы с помощью классов, производных от абстрактных классов. Конкретный класс имеет реализацию и может иметь Private члены." />
  <question qgroup="2" qtext="Какие члены могут быть абстрактными? " qanswer="Ключевое слово abstract может использоваться с классами, методами, свойствами, индексаторами и событиями.  " />
  <question qgroup="1" qtext="Что такое Dependency Injection?" qanswer="Методика для создания слабосвязанных приложений. Она предоставляет возможности для упрощения кода, извлечения и обработки зависимостей между объектами и автоматического создания экземпляров зависимого объекта.  " />
  <question qgroup="3" qtext="Что такое одномерный массив?" qanswer="Одномерный массив - это массив, который имеет один индекс-вектор. Массив — именованный набор однотипных переменных, расположенных в памяти непосредственно друг за другом, доступ к которым осуществляется по индексу. " />
  <question qgroup="3" qtext="Что такое зубчатый массив? " qanswer="Зубчатый массив – это такой, длина второго и последующих измерений которого может быть различной. Проще говоря, это массив, состоящий из массивов одного типа, но разной длины." />
  <question qgroup="3" qtext="Может ли индекс массива превышать общее количество элементов массива?" qanswer="Не может, все массивы начинаются с 0 и их индекс не может быть равен элементам. Возможно только если массив содержит Null значения." />
  <question qgroup="3" qtext="С какого числа начинают индексироваться элементы массива? " qanswer="Массивы начинаются с 0" />
  <question qgroup="2" qtext="Что такое индексатор?" qanswer="Индексаторы позволяют индексировать экземпляры класса или структуры так же, как массивы. Индексаторы напоминают свойства, но их методы доступа принимают параметры. " />
  <question qgroup="2" qtext="Может ли индексатор быть абстрактным? " qanswer="Индексаторы можно перегружать. " />
  <question qgroup="2" qtext="Что такое статические члены?" qanswer="Статическая переменная -это общая переменная для всех экземпляров класса, которая хранится в объекте." />
  <question qgroup="2" qtext="Что такое статический класс? " qanswer="Статический класс — является одним из разновидностей класса. Суть данного вида состоит в том, что каждая функция данного класса является статической. Использовать статические функции класса можно, не создавая самого экземпляра класса.  " />
  <question qgroup="2" qtext="Что такое вложенный класс? " qanswer="Тип, определенный внутри класса или структуры, называется вложенным типом. Экземпляр внутреннего класса не может существовать без привязки к включающему его классу верхнегоу ровня." />
  <question qgroup="2" qtext="Что такое расширяющие методы?" qanswer="Методы расширения позволяют &quot;добавлять&quot; методы в существующие типы без создания нового производного типа, перекомпиляции или иного изменения исходного типа. Методы расширения являются особым видом статического метода, но они вызываются, как если бы они были методами экземпляра в расширенном типе. " />
  <question qgroup="1" qtext="Паттерн проектирования – Singleton. " qanswer="Паттерн Singleton гарантирует, что у класса есть только один экземпляр, и предоставляет к нему глобальную точку доступа." />
  <question qgroup="2" qtext="Что такое техника делегирования?" qanswer="Возможность делать вызовы методов с заранее определёнными сигнатурами — это и есть самая суть делегатов. " />
  <question qgroup="2" qtext="Что такое структура?" qanswer="Структура в C# - это конструкция языка, состоящая из ключевого слова struct, идентификатора и тела. Структура может содержать в своем теле поля, свойства и методы. Также структуры могут включать в свое тело другие структуры и классы, но такой подход не является широко распространённой техникой. " />
  <question qgroup="2" qtext="Можно ли создавать структуры без оператора new?" qanswer="Как и класс, структура может определять констукторы. Но в отличие от класса нам не обязательно вызывать конструктор для создания объекта структуры:" />
  <question qgroup="2" qtext="Какие есть ограничения при использовании структур?" qanswer="Структуры должны использоваться только для хранения маленьких, единых, желательно неизменных значений, которые не будут часто упаковываться. В C#, структурам запрещается иметь конструктор по умолчанию. " />
  <question qgroup="2" qtext="Назовите основные отличия классов от структур." qanswer="1 - Размещение: в области стека (классы — управляемая куча (heap)). 2 - Копирование: создаётся отдельная копия объекта, которая после копирования живёт «своей жизнью» (классы — создаётся ссылка на тот же класс (т. н. instance)). 3 - Наследование: не разрешается дополнение своими свойствами; от него нельзя наследовать (класс — позволяет, кроме случаев когда класс создавался с ключевым словом sealed, не разрешающим наследование). 4 - Передача параметров: как локальные копии переменных (в классах — как ссылки). 5 - Конструктор: да, кроме конструктора по умолчанию, который не требует параметров (в классах — да, без ограничений). 6 - Освобождение переменной: при выходе за пределы видимости (в классах — во время процесса сборки мусора (garbage collector))." />
  <question qgroup="2" qtext="Почему структуры могут наследоваться только от интерфейсов." qanswer="Структуры могут реализовывать интерфейсы, но они не могут наследоваться от структурили классов, по сколько уже наследуются не явно от абстрактного класса ValueType" />
  <question qgroup="2" qtext="Можно ли в структуре создавать конструкторы? " qanswer="В C#, структурам запрещается иметь конструктор по умолчанию. При наличии пользовательского конструктора, все не инициализированные поля должны быть в нем инициализированы." />
  <question qgroup="2" qtext="Что такое упаковка и распаковка? " qanswer="Упаковка-преобразование представляет собой процесс преобразования структурного типа в тип object или любой другой тип интерфейса, реализуемый этим типом. " />
  <question qgroup="2" qtext="Ковариантны ли массивы элементов структурного типа?" qanswer="Ковариантность не применима к массивам элементов структурных типов." />
  <question qgroup="2" qtext="Какую структуру необходимо использовать для получения формата времени?" qanswer="DateTime – структура, которая представляет текущее время, обычно выраженное как дата и время суток. " />
  <question qgroup="2" qtext="Какие бывают виды перечислений?" qanswer="По умолчанию базовым типом каждого элемента перечисления является int. Можно задать другой целочисленный тип, используя двоеточие. Утвержденные типы для перечисления: byte, sbyte, short, ushort, int, uint, long и ulong" />
  <question qgroup="2" qtext="От какого класса наследуются все перечисления? " qanswer="Все перечисления наследуются от типа ValueType - Значимый тип. ValueType переопределяет виртуальные методы из Object с более подходящими реализациями для типов значений." />
  <question qgroup="2" qtext="Что такое структура? " qanswer="Структура (классическая)  -это конструкция языка, позволяющая содержать в себе набор полей различных типов." />
  <question qgroup="2" qtext="Можно ли создавать структуры без оператора new? " qanswer="В отличие от классов структуры можно создавать без использования оператора new." />
  <question qgroup="1" qtext="Что такое техника делегирования? " qanswer="Основной шаблон проектирования, в котором объект внешне выражает некоторое поведение, но в реальности передаёт ответственность за выполнение этого поведения связанному объекту." />
  <question qgroup="2" qtext="Что такое делегат? " qanswer="Делегат (delegate) — безопасный указатель на метод. В классе-делегате строго указаны тип возвращаемого значения и аргументы метода (сигнатура). " />
  <question qgroup="2" qtext="Что такое комбинированный делегат? " qanswer="Комбинированный делегат - это техника объединения делегатов в один." />
  <question qgroup="2" qtext="Что такое анонимный метод? " qanswer="Это оператор или выражение, которое можно использовать каждый раз, когда ожидается тип делегата. По сути - это заполенние тела функции делегата после его инициализации." />
  <question qgroup="2" qtext="Какие есть правила при вызове методов сообщенных с делегатами?" qanswer="Захваченная переменная не будет уничтожена сборщиком мусора до тех пор, пока делегат, который на нее ссылается, не выйдет за границы области. Переменная, введенная в лямбда-выражение, невидима во внешнем методе. Лямбда-выражение не может непосредственно захватывать параметры ref или out из включающего их метода. Лямбда-выражение не может содержать оператор goto, оператор break или оператор continue, для которых, метка перехода находится вне тела либо в теле содержащейся анонимной функции. " />
  <question qgroup="2" qtext="Что такое лямбда выражение? " qanswer="Лямбда-выражение — это анонимная функция, которая содержит выражения и операторы и может использоваться для создания делегатов.  " />
  <question qgroup="2" qtext="Чем лямбда выражение отличается от лямбда оператора? " qanswer="Во всех лямбда-выражениях используется лямбда-оператор =&gt;, который читается как &quot;переходит в&quot;. Левая часть лямбда-оператора определяет параметры ввода (если таковые имеются), а правая часть содержит выражение или блок оператора. Лямбда-выражение x =&gt; x * x читается как &quot;x переходит в x, x раз&quot;. " />
  <question qgroup="2" qtext="Что такое обобщение? " qanswer="Обобщение – элемент кода, способный адаптироваться для выполнения общих (сходных) действий над различными типами данных. " />
  <question qgroup="2" qtext="Что такое закрытый тип? " qanswer="Пример закрытого типа: MyClass&lt;int&gt;.  обеспечиваетт безопасность типов, так как могут содержать только типы, которые Вы задаете при объявлении - в данном случае INT." />
  <question qgroup="2" qtext="Что такое открытый тип? " qanswer="Пример открытого типа: MyClass&lt;T&gt;. В данном случае в место заполнения типа может быть подставлен любой тип." />
  <question qgroup="2" qtext="Объясните понятия ковариантности и контрвариантности обобщений." qanswer="Ковариантность обобщений – upcast параметров типов. Контрвариантность обобщений – downcast параметров типов. " />
  <question qgroup="2" qtext="Что такое Nullable тип? " qanswer="Тип Nullable&lt;T&gt; представляет типы значений с пустыми (нулевыми) значениями. " />
  <question qgroup="2" qtext="Что такое операция поглощения? " qanswer="Оператор ?? возвращает левый операнд, если он не null и правый операнд, если левый null." />
  <question qgroup="2" qtext="Какие преимущества использования обобщений? " qanswer="Обобщения обеспечивают большую производительность, так как не происходит операции &quot;упаковки-распаковки&quot;(Boxing-Unboxing)." />
  <question qgroup="2" qtext="Что такое событие? " qanswer="События позволяют классу или объекту уведомлять другие классы или объекты о возникновении каких-либо ситуаций." />
  <question qgroup="2" qtext="Могут ли события быть статическими?" qanswer="Событие можно объявить как статическое событие при помощи ключевого слова static. При этом событие становится доступным для вызова в любое время, даже если экземпляр класса отсутствует. " />
  <question qgroup="2" qtext="Могут ли события быть виртуальными? " qanswer="Событие может быть помечено как виртуальное событие при помощи ключевого слова virtual. Это позволяет производным классам переопределять поведение события при помощи ключевого слова override. " />
  <question qgroup="2" qtext="Могут ли события быть абстрактными? " qanswer="Да, события могут быть абстрактными." />
  <question qgroup="1" qtext="Что такое паттерн MVP? " qanswer="MVP шаблон проектирования пользовательского интерфейса, который был разработан для облегчения автоматического модульного тестирования и улучшения разделения ответственности в презентационной логике" />
  <question qgroup="3" qtext="Что такое поток? " qanswer="Поток – это независимый путь исполнения, способный выполняться одновременно с другими потоками. " />
  <question qgroup="2" qtext="Какой класс нужно использовать для создания экземпляра потока? " qanswer="Следует использовать делегат ThreadStart или ParameterizedThreadStart для задания программного кода, управляемого потоком." />
  <question qgroup="2" qtext="Какой делегат нужно использовать для передачи метода в поток? " qanswer="С помощью делегата ParameterizedThreadStart можно передавать данные в потоковую процедуру. " />
  <question qgroup="2" qtext="Каким способом можно передать в поток параметры? " qanswer="С помощью делегата ParameterizedThreadStart можно передавать данные в потоковую процедуру. В виде аргумента Object." />
  <question qgroup="2" qtext="Что такое критическая секция?" qanswer="Часть кода, которая может выполняться только в один момент времени и не имеет возможности либо необходимости работать в нескольких местах одновременно. Таким сегментом может быть доступ к файлу, базе данных и т.д" />
  <question qgroup="2" qtext="Что такое разделяемый ресурс? " qanswer="Основная причина применения синхронизации  - необходимость разделять среди двух или более потоков общий ресурс (разделяемый ресурс), который может быть одновременно доступен только одному потоку. " />
  <question qgroup="2" qtext="Что такое объект синхронизации доступа к разделяемому ресурсу?" qanswer="Объектом синхронизации доступа к разделяемому ресурсу считается такой объект, который представляет синхронизируемый ресурс. В некоторых случаях им оказывается экземпляр самого ресурса или же  произвольный экземпляр класса, используемого для синхронизации.  " />
  <question qgroup="2" qtext="Чем отличается использование оператора lock от класса Monitor? " qanswer="Ключевое слово lock не позволит одному потоку войти в важный раздел кода в тот момент, когда в нем находится другой поток. Ключевое слово lock вызывает Monitor.Enter() в начале блока и Monitor.Exit() в конце блока. " />
  <question qgroup="1" qtext="Что такое исключение?" qanswer="Ошибки времени выполнения и другие возможные проблемы (исключения), которые могут возникнуть при выполнении программы и приводят к невозможности (бессмысленности) дальнейшей отработки программой её базового алгоритма." />
  <question qgroup="2" qtext="Что такое конструкция try - catch? " qanswer="Когда исключение генерируется оператором try, оно перехватывается составляющим ему пару оператором catch." />
  <question qgroup="2" qtext="Что такое конструкция try - catch - finally? " qanswer="Когда исключение генерируется оператором try, оно перехватывается составляющим ему пару оператором catch, блок оператора finaly выполняется в любом случае." />
  <question qgroup="2" qtext="Как создать пользовательское исключение? " qanswer="Создать класс наследуемый от System.Exception и древа его наследования." />
  <question qgroup="2" qtext="В каких случаях не срабатывает блок finally? " qanswer="В случае Overflow, OutOfMemory exception." />
  <question qgroup="1" qtext="Что такое парадигма программирования? " qanswer="Cовокупность идей и понятий, определяющих стиль написания компьютерных программ (подход к программированию). Это способ концептуализации, определяющий организацию вычислений и структурирование работы, выполняемой компьютером." />
  <question qgroup="1" qtext="Назовите основные принципы объектно-ориентированного программирования." qanswer="Инкапсуляция, Наследование, Полиморфизм " />
  <question qgroup="1" qtext="Что такое класс?" qanswer="Класс является описываемой на языке терминологии исходного кода моделью ещё не существующей сущности (объекта). Фактически он описывает устройство объекта, являясь своего рода чертежом." />
  <question qgroup="1" qtext="Что такое объект?" qanswer="Объект – сущность в адресном пространстве вычислительной системы, появляющаяся при создании экземпляра класса или копирования прототипа." />
  <question qgroup="1" qtext="Что такое инкапсуляция?" qanswer="Инкапсуляция — это свойство системы, позволяющее объединить данные и методы, работающие с ними, в классе, и скрыть детали реализации от пользователя." />
  <question qgroup="4" qtext="Что в Python не является объектом? " qanswer="В Python всё является объектами " />
  <question qgroup="4" qtext="Что такое атрибуты класса?" qanswer="В терминологии Python члены класса называются атрибутами. " />
  <question qgroup="4" qtext="Что такое атрибуты экземпляров класса?" qanswer="Атрибуты объектов-экземпляров делятся на два типа: атрибуты-данные и методы. " />
  <question qgroup="4" qtext="Чем отличаются обычные связанные методы, статические и методы класса? " qanswer="Методы класса похожи на обычные методы, но относятся к самому классу как объекту – экземпляру метакласса (в отличие от обычных методов, которые принадлежат объектам – экземплярам классов, и статических методов, которые относятся к самому классу и всем его экземплярам и не принадлежат никакому объекту – экземпляру). Их первый аргумент принято называть cls. Статический метод-метод который является общим для класса и его экземпляров, но не имеет доступа к атрибутам экземлпяров" />
  <question qgroup="4" qtext="Что такое специальные («магические») методы?" qanswer="Атрибуты, имена которых начинаются и заканчиваются двумя знаками подчёркивания, являются внутренними для Python и задают особые свойства объектов. __new__, __init__, __repr__ и т.д" />
  <question qgroup="1" qtext="Что такое наследование?" qanswer="Наследование — механизм языка, позволяющий описать новый класс на основе уже существующего (родительского, базового) класса. Класс-потомок может добавить собственные методы и свойства, а также пользоваться родительскими методами и свойствами." />
  <question qgroup="1" qtext="Что такое множественное наследование?" qanswer="При множественном наследовании у класса может быть более одного предка. В этом случае класс наследует методы всех предков. Достоинство такого подхода в большей гибкости, однако он может быть потенциальным источником ошибок." />
  <question qgroup="4" qtext="Каким образом в Python указать, что один класс наследуется от другого класса? От нескольких других классов?" qanswer="class Pegasus(Horse, Bird):" />
  <question qgroup="4" qtext="Какие виды классов существуют в Python 2? В Python 3? " qanswer="В целях совместимости с существующим кодом в Python 2 существуют две системы типов: классы нового типа (new-style classes) и классы старого типа (old-style classes, classic classes). В Python 3 классов старого типа не существует. Все классы являются классами нового типа в терминологии Python 2. Все классы по умолчанию наследуются от класса object, даже если это явно не указывать." />
  <question qgroup="4" qtext="Что такое MRO? " qanswer="Порядок, в котором интерпретатор просматривает базовые классы, определяется линеаризацией данного класса, также называемой MRO (Method Resolution Order). Она хранится в атрибуте класса __mro__. " />
  <question qgroup="4" qtext="Каким образом получить доступ к методу базового класса, если он был переопределён в данном?" qanswer="Super().methodName()" />
</Questions>